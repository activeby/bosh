#!/usr/bin/env ruby

# Copyright (c) 2003-2012 Active Cloud, Inc.

# Usage example:
#      $ cd /bosh-installation-dir/bosh/cloudstack_cpi/bin
#      $ ruby bosh_cloudstack_console -c /path-to-file/cloudstack_cpi_secure_config.yml
#      or just
#      $ ruby bosh_cloudstack_console

# Put your access credentials securely in a separate file.
# Contents of the file cloudstack.yaml:
# ---
# access_key_id: key
# secret_access_key: key
# service_endpoint: domain

# If you want to run this script in the interactive mode run it with -i switch
#      $ ./bosh_cloudstack_console -i


# run in the bundler context
gemfile = File.expand_path("../../Gemfile", __FILE__)
if File.exists?(gemfile)
  ENV["BUNDLE_GEMFILE"] = gemfile
  require "rubygems"
  require "bundler/setup"
end

# parse config with cloudstack access credentials
require 'yaml'
require "optparse"

config_file = File.expand_path("../cloudstack.yaml", __FILE__)
irb = false
opts_parser = OptionParser.new do |opts|
  opts.on("-c", "--config FILE", "Security configuration file") { |file| config_file = file }
  opts.on("-i", "--irb", "Interactive mode") { |i| irb = i }
end

opts_parser.parse!

unless config_file
  puts opts_parser
  exit(1)
end

puts "=> Loading secure configuration from #{config_file}"

def get_config(config_file)
  config = YAML.load(File.read(config_file))

  #{
  #    'cloudstack' => {
  #        'cloudstack_api_key' => config["cloudstack"]["access_key_id"],
  #        'cloudstack_secret_access_key' => config["cloudstack"]["secret_access_key"],
  #        'cloudstack_host' => config["cloudstack"]["service_endpoint"],
  #        'default_availability_zone' => config["cloudstack"]["default_availability_zone"],
  #        'supported_disk_offerings' => config["cloudstack"]["supported_disk_offerings"]
  #    }
  #}
  config
end

@config = get_config(config_file)

puts "=> CloudStack service endpoint is #{@config['cloudstack']['service_endpoint']}"

# add logger
$:.unshift(File.expand_path("../../lib", __FILE__))
require "../lib/bosh_cloudstack_cpi"

require 'ostruct'
require 'logger'

cloud_config = OpenStruct.new(:logger => Logger.new(STDOUT))
Bosh::Clouds::Config.configure(cloud_config)

# irb mode
module ConsoleHelper
  def cld
    @cld ||= Bosh::CloudStackCloud::Cloud.new(@config)
  end

  def compute
    cld.cloudstack
  end
end
include ConsoleHelper

if irb
  require "irb"
  #require "irb/completion"

  IRB.start
else
  #### Test manually ####
  puts "=> Performing test operations with cloudstack_cpi code"

  #cld.create_stemcell "image", {}
  #disk_id = cld.create_disk(1500)
  #puts disk_id
  #cld.attach_disk(4000, 6959)
  #cld.attach_disk(3976, 6955)
  #cld.detach_disk(4000, 6905)
  #cld.delete_disk(disk_id)
  #cld.configure_networks(4000, {"network"=>{"type"=>"vip", "cloud_properties"=>{"public_ip"=>"178.159.244.152", "public_port"=>2223, "protocol"=>"tcp", "privateport"=>2223, "virtualmachineid"=>4000}}})
  puts "=> success"
end